// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -------------------------------------
// ** schema is sorted alphabetically **

model Day {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  date      DateTime

  Week   Week @relation(fields: [weekId], references: [id])
  weekId Int
}

model Ingredient {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  energy    Int?     @default(0)
  category  String?
  isCooked  Boolean? @default(false)
  isAlcohol Boolean? @default(false)
  carbs     Float?   @default(0)
  fat       Float?   @default(0)
  proteins  Float?   @default(0)
  calcium   Float?   @default(0)
  iron      Float?   @default(0)
  magnesium Float?   @default(0)
  sodium    Float?   @default(0)
  potassium Float?   @default(0)
  vitaminD  Float?   @default(0)
  zinc      Float?   @default(0)
}

model Recipe {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String   @unique
  servings     Int      @default(1)
  image        String?
  prepTime     Int?     @default(0)
  cookTime     Int?     @default(0)
  activeTime   Int?     @default(0)
  inactiveTime Int?     @default(0)
  readyTime    Int?     @default(0)
  totalTime    Int      @default(0)

  recipeIngredients   RecipeIngredient[]
  recipeTags          RecipeTag[]
  recipeUpvotes       RecipeUpvote[]
  User                User                  @relation(fields: [userId], references: [id])
  userId              Int
  RecipeTagsOnRecipes RecipeTagsOnRecipes[]
}

model RecipeIngredient {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String

  Recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int
}

model RecipeTag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  recipes             Recipe[]
  RecipeTagsOnRecipes RecipeTagsOnRecipes[]
}

model RecipeTagsOnRecipes {
  recipe      Recipe    @relation(fields: [recipeId], references: [id])
  recipeId    Int
  recipeTag   RecipeTag @relation(fields: [recipeTagId], references: [id])
  recipeTagId Int

  @@id([recipeId, recipeTagId])
}

model RecipeUpvote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int
  User     User   @relation(fields: [userId], references: [id])
  userId   Int
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens         Token[]
  sessions       Session[]
  weeks          Week[]
  recipesUpvotes RecipeUpvote[]
  recipes        Recipe[]
}

model Week {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  weekNumber Int       @default(0)
  startDate  DateTime?
  endDate    DateTime?

  days   Day[]
  User   User  @relation(fields: [userId], references: [id])
  userId Int
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
enum TokenType {
  RESET_PASSWORD
}
