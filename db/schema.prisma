// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -------------------------------------
// ** schema is sorted alphabetically **

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  body         String
  upvotesCount Int    @default(0)

  upvotes  Upvote[]
  comments Comment[] @relation("CommentToComment")

  Recipe       Recipe?     @relation(fields: [recipeId], references: [id])
  recipeId     Int?
  Membership   Membership? @relation(fields: [membershipId], references: [id])
  membershipId Int?
  Comment      Comment?    @relation("CommentToComment", fields: [commentId], references: [id])
  commentId    Int?
}

model Ingredient {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  body     String?
  category String?
  energy   Int?    @default(0)

  recipes Recipe[]
  tags    Tag[]

  Nutrition   Nutrition? @relation(fields: [nutritionId], references: [id])
  nutritionId Int?
}

model Instruction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  body String

  Recipe   Recipe? @relation(fields: [recipeId], references: [id])
  recipeId Int?
}

model Image {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url String

  Recipe   Recipe? @relation(fields: [recipeId], references: [id])
  recipeId Int?
}

model Membership {
  id Int @id @default(autoincrement())

  name MembershipName @default(BONAPP)
  role MembershipRole @default(CONSUMER)

  upvotes  Upvote[]
  recipes  Recipe[]
  comments Comment[]

  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

enum MembershipName {
  BONAPP
}

enum MembershipRole {
  ADMIN
  CONSUMER
}

model Nutrition {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isCooked  Boolean @default(false)
  isAlcohol Boolean @default(false)
  energy    Float   @default(0)
  carbs     Float   @default(0)
  fat       Float   @default(0)
  proteins  Float   @default(0)
  calcium   Float   @default(0)
  iron      Float   @default(0)
  magnesium Float   @default(0)
  sodium    Float   @default(0)
  potassium Float   @default(0)
  vitaminD  Float   @default(0)
  zinc      Float   @default(0)

  ingredients Ingredient[]
  recipes     Recipe[]
}

model Recipe {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  servings     Int    @default(1)
  upvotesCount Int    @default(0)

  prepTime     Int @default(0)
  cookTime     Int @default(0)
  activeTime   Int @default(0)
  inactiveTime Int @default(0)
  readyTime    Int @default(0)
  totalTime    Int @default(0)

  comments     Comment[]
  ingredients  Ingredient[]
  instructions Instruction[]
  images       Image[]
  tags         Tag[]
  upvotes      Upvote[]

  Author      Membership? @relation(fields: [authorId], references: [id])
  authorId    Int?
  Nutrition   Nutrition?  @relation(fields: [nutritionId], references: [id])
  nutritionId Int?
}

model ScrappedRecipe {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url  String @unique
  json Json
}

model Session {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?

  handle             String  @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Tag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  body String

  recipes     Recipe[]
  ingredients Ingredient[]
}

model Token {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Upvote {
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  recipeId     Int
  membership   Membership @relation(fields: [membershipId], references: [id])
  membershipId Int

  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
  @@unique([recipeId, membershipId])
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName      String?
  lastName       String?
  email          String   @unique
  hashedPassword String?
  role           UserRole @default(USER)

  memberships Membership[]
  sessions    Session[]
  tokens      Token[]
}

enum UserRole {
  USER
  ADMIN
}
